<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Animation App</title>
  <style>
    /* Global Settings */
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f0f2f5;
    }
    
    /* Toolbar styling */
    .toolbar {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      padding: 10px;
      background: #fff;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      position: sticky;
      top: 0;
      z-index: 100;
    }
    
    .toolbar button {
      padding: 8px 16px;
      border: none;
      background: #0078d7;
      color: #fff;
      border-radius: 4px;
      cursor: pointer;
      transition: background 0.3s;
    }
    
    .toolbar button.active,
    .toolbar button:hover {
      background: #005a9e;
    }
    
    .toolbar label {
      font-size: 0.9rem;
    }
    
    .toolbar input[type="range"] {
      cursor: pointer;
    }
    
    /* Canvas container styling */
    #canvasContainer {
      display: flex;
      align-items: center;
      justify-content: center;
      height: calc(100vh - 60px);
      padding: 10px;
    }
    
    canvas {
      background: #fff;
      border: 1px solid #ccc;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      max-width: 100%;
      max-height: 100%;
    }
  </style>
</head>
<body>

  <!-- Toolbar -->
  <div class="toolbar">
    <button id="penTool" class="active">Pen</button>
    <button id="fillTool">Fill Bucket</button>
    <label for="penThickness">Pen Thickness:</label>
    <input type="range" id="penThickness" min="1" max="50" value="5">
    <span id="thicknessValue">5</span>
    <label for="fillColor">Fill Color:</label>
    <input type="color" id="fillColor" value="#ff0000">
    <button id="clearCanvas">Clear</button>
  </div>

  <!-- Canvas Area -->
  <div id="canvasContainer">
    <canvas id="drawingCanvas" width="800" height="600"></canvas>
  </div>

  <!-- JavaScript for drawing and flood fill -->
  <script>
    const canvas = document.getElementById('drawingCanvas');
    const ctx = canvas.getContext('2d');

    // Initial settings
    let drawing = false;
    let currentTool = 'pen';
    let penThickness = parseInt(document.getElementById('penThickness').value, 10);
    let fillColor = document.getElementById('fillColor').value;
    
    ctx.lineCap = 'round';
    ctx.lineJoin = 'round';

    // Update pen thickness display and variable
    const thicknessValueDisplay = document.getElementById('thicknessValue');
    document.getElementById('penThickness').addEventListener('input', (e) => {
      penThickness = parseInt(e.target.value, 10);
      thicknessValueDisplay.textContent = penThickness;
    });
    // Update chosen fill color
    document.getElementById('fillColor').addEventListener('change', (e) => {
      fillColor = e.target.value;
    });

    // Tool selection buttons
    const penToolButton = document.getElementById('penTool');
    const fillToolButton = document.getElementById('fillTool');
    
    penToolButton.addEventListener('click', () => {
      currentTool = 'pen';
      penToolButton.classList.add('active');
      fillToolButton.classList.remove('active');
    });
    
    fillToolButton.addEventListener('click', () => {
      currentTool = 'fill';
      fillToolButton.classList.add('active');
      penToolButton.classList.remove('active');
    });

    // Clear canvas button
    document.getElementById('clearCanvas').addEventListener('click', () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    });
    
    // Mouse event handling for drawing and filling
    canvas.addEventListener('mousedown', (e) => {
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      
      if (currentTool === 'pen') {
        drawing = true;
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.strokeStyle = '#000000';  // Pen remains black
        ctx.lineWidth = penThickness;
      } else if (currentTool === 'fill') {
        floodFill(x, y, hexToRgba(fillColor));
      }
    });

    canvas.addEventListener('mousemove', (e) => {
      if (drawing && currentTool === 'pen') {
        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        ctx.lineTo(x, y);
        ctx.stroke();
      }
    });

    canvas.addEventListener('mouseup', () => {
      if (currentTool === 'pen') drawing = false;
    });
    
    canvas.addEventListener('mouseleave', () => {
      if (currentTool === 'pen') drawing = false;
    });
    
    // --- Flood Fill Functions ---

    // Convert a hex color (e.g., "#ff0000") to an [r,g,b,a] array
    function hexToRgba(hex) {
      const r = parseInt(hex.substring(1, 3), 16);
      const g = parseInt(hex.substring(3, 5), 16);
      const b = parseInt(hex.substring(5, 7), 16);
      return [r, g, b, 255];
    }
    
    // Compare two [r, g, b, a] color arrays for a match
    function colorsMatch(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    
    // An iterative flood fill algorithm using a stack
    function floodFill(startX, startY, fillColorArr) {
      const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const data = imgData.data;
      const width = canvas.width;
      const height = canvas.height;
      
      const stack = [];
      const startXInt = Math.floor(startX);
      const startYInt = Math.floor(startY);
      const startPos = (startYInt * width + startXInt) * 4;
      const targetColor = [
        data[startPos],
        data[startPos + 1],
        data[startPos + 2],
        data[startPos + 3]
      ];
      
      // If target color is already the fill color, do nothing
      if (colorsMatch(targetColor, fillColorArr)) return;
      
      stack.push([startXInt, startYInt]);
      
      while (stack.length) {
        const [x, y] = stack.pop();
        let currentY = y;
        let currentPos = (currentY * width + x) * 4;
        
        // Move upward as long as the color matches
        while (currentY >= 0 && colorsMatch([
          data[currentPos],
          data[currentPos+1],
          data[currentPos+2],
          data[currentPos+3]
        ], targetColor)) {
          currentY--;
          currentPos -= width * 4;
        }
        
        currentY++;
        currentPos += width * 4;
        let reachLeft = false;
        let reachRight = false;
        
        // Move downward, and check neighboring pixels
        while (currentY < height && colorsMatch([
          data[currentPos],
          data[currentPos+1],
          data[currentPos+2],
          data[currentPos+3]
        ], targetColor)) {
          // Fill the current pixel with the new color
          data[currentPos]     = fillColorArr[0];
          data[currentPos + 1] = fillColorArr[1];
          data[currentPos + 2] = fillColorArr[2];
          data[currentPos + 3] = fillColorArr[3];
          
          // Check pixel to the left
          if (x > 0) {
            const posLeft = currentPos - 4;
            if (colorsMatch([
              data[posLeft],
              data[posLeft+1],
              data[posLeft+2],
              data[posLeft+3]
            ], targetColor)) {
              if (!reachLeft) {
                stack.push([x - 1, currentY]);
                reachLeft = true;
              }
            } else {
              reachLeft = false;
            }
          }
          
          // Check pixel to the right
          if (x < width - 1) {
            const posRight = currentPos + 4;
            if (colorsMatch([
              data[posRight],
              data[posRight+1],
              data[posRight+2],
              data[posRight+3]
            ], targetColor)) {
              if (!reachRight) {
                stack.push([x + 1, currentY]);
                reachRight = true;
              }
            } else {
              reachRight = false;
            }
          }
          
          currentY++;
          currentPos += width * 4;
        }
      }
      
      ctx.putImageData(imgData, 0, 0);
    }
  </script>
</body>
</html>
